/*
   Uno sketch to drive a stepper motor using the AccelStepper library.
   Demonstrates acceleration using run(). Prints results every second.
   Runs stepper back and forth between limits. (Like Bounce demo program.)
   Works with a ULN-2003 unipolar stepper driver, or a bipolar, constant voltage motor driver
   such as the L298 or TB6612, or a step/direction constant current driver like the a4988.
   Initial Creation: 10/15/21  --jkl  jlarson@pacifier.com
      - Rev 1 - 11/7/21      -jkl
      - Rev 2 = 12/14/21   -jkl
*/
// Include the AccelStepper Library
#include <AccelStepper.h>
#include <elapsedMillis.h>
#include <ESP8266WiFi.h>
#include <E131.h>

#define channel_1_green 1 // the channel number to link to output 1 green.
#define channel_0_red 0 // the channel number to link to output 1 red.
#define channel_2_blue 2 // the channel number to link to output 2 blue.

// this sets the pin numbers to use as outputs.
#define output_2_blue D2 // the pin to use as output 2 blue (D1).



// ***** USER SETUP STUFF *****
const char WIFI_SSID[] = "";  // replace with your SSID.
const char WIFI_PASS[] = ""; // replace with your PASSWORD.

const int universe = 21; // this sets the universe number you are using.

// this sets the channel number used by the output.
E131 e131;

// Motor Connections (unipolar motor driver)
const int In1 = 16;
const int In2 = 12;
const int In3 = 14;
const int In4 = 13;
// Motor Connections (constant voltage bipolar H-bridge motor driver)
const int AIn1 = 8;
const int AIn2 = 9;
const int BIn1 = 10;
const int BIn2 = 11;
// Motor Connections (constant current, step/direction bipolar motor driver)
const int dirPin = 4;
const int stepPin = 5;
long Position = 0;
long NewPosition = 0;

// Creates an instance - Pick the version you want to use and un-comment it. That's the only required change.
//AccelStepper myStepper(AccelStepper::FULL4WIRE, AIn1, AIn2, BIn1, BIn2);  // works for TB6612 (Bipolar, constant voltage, H-Bridge motor driver)
AccelStepper myStepper(AccelStepper::FULL4WIRE, In1, In3, In2, In4);    // works for ULN2003 (Unipolar motor driver)
//AccelStepper myStepper(AccelStepper::DRIVER, stepPin, dirPin);           // works for a4988 (Bipolar, constant current, step/direction driver)

elapsedMillis printTime;



void setup() {
  Serial.begin(115200);

  pinMode(output_2_blue, OUTPUT); // set the pins chosen above as outputs.
  digitalWrite(output_2_blue, LOW); // set the pins chosen above to low / off.
  
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  
  // set the maximum speed, acceleration factor, and the target position.
  myStepper.setMaxSpeed(200.0);   // the motor accelerates to this speed exactly without overshoot. Try other values.
  myStepper.setAcceleration(50.0);   // try other acceleration rates.
  Position = myStepper.currentPosition();

  //myStepper.moveTo(100000); 
  // For negative rotation
  //myStepper.moveTo(-100000);    // This will demonstrate a move in the negative direction.
  e131.begin(WIFI_SSID, WIFI_PASS);               /* via Unicast on the default port */
  //   e131.beginMulticast(ssid, passphrase, universe); /* via Multicast for Universe 1 */

}
int count = 0;    // tracks seconds to trigger an action if desired.
void loop() {
  float mSpeed;
    uint16_t num_channels = e131.parsePacket();
      if (num_channels) {
      Serial.println("we have data");
      Serial.println(e131.data[channel_1_green]);
      Serial.println(e131.data[channel_0_red]);
      Serial.println(e131.data[channel_2_blue]);
  
      if (e131.data[channel_1_green] >= 200) //if channel value is greater then 127
      {
        
          myStepper.moveTo(Position + 4000);
          NewPosition = myStepper.currentPosition();
 
      }
 
      if (e131.data[channel_0_red] >= 200) //if channel value is greater then 127
      {
        
          myStepper.moveTo(Position); 
 
      }

      if (e131.data[channel_2_blue] >= 200) //if channel value is greater then 127
      {
        
          digitalWrite(output_2_blue, HIGH); //turn relay on
 
      }
      else
      {
          digitalWrite(output_2_blue, LOW); //turn relay on
      }

      
      if (printTime >= 10000) {    // reports speed and position each second
          printTime = 0;
          mSpeed = myStepper.speed();
          Serial.print(mSpeed);
          Serial.print("  ");
          Serial.print(myStepper.currentPosition());
          Serial.print("  ");
          Serial.println(count);
          
        }
    
    }
  
  myStepper.run();
}
